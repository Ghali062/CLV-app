import streamlit as st
import pandas as pd
import pickle
import subprocess
import os
import sys

# to execute this app : 
# pip install -r requirements.txt
# $ streamlit run streamlit_CLV.py    

# T√©l√©charger le mod√®le si n√©cessaire
@st.cache_resource
def download_model_if_needed():
    """T√©l√©charge le mod√®le depuis Google Drive si le fichier model.pkl n'existe pas"""
    model_path = "clv_model_pipeline.pkl"
    
    if not os.path.exists(model_path):
        st.info("üîÑ T√©l√©chargement du mod√®le en cours...")
        try:
            # Ex√©cuter le script de t√©l√©chargement
            result = subprocess.run([sys.executable, "download_model.py"], 
                        capture_output=True, text=True, check=True)
            st.success("‚úÖ Mod√®le t√©l√©charg√© avec succ√®s!")
        except subprocess.CalledProcessError as e:
            st.error(f"‚ùå Erreur lors du t√©l√©chargement du mod√®le: {e}")
            st.error(f"Sortie d'erreur: {e.stderr}")
            st.stop()
        except FileNotFoundError:
            st.error("‚ùå Script download_model.py non trouv√©!")
            st.stop()
    
    return model_path

# T√©l√©charger le mod√®le
model_path = download_model_if_needed()

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction du CLV Client", 
    page_icon="üíé", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour un look moderne
st.markdown("""
<style>
    /* Styles globaux */
    .main {
        padding-top: 2rem;
    }
    
    /* Header styling */
    .header-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .header-title {
        color: white;
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .header-subtitle {
        color: rgba(255,255,255,0.9);
        font-size: 1.2rem;
        font-weight: 300;
    }
    
    /* Card styling */
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        border-left: 4px solid #667eea;
        margin-bottom: 1rem;
    }
    
    .metric-card h3 {
        color: #333;
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: #667eea;
    }
    
    /* Form styling */
    .stSelectbox > div > div {
        border-radius: 10px;
        border: 2px solid #e0e0e0;
    }
    
    .stSelectbox > div > div:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
    
    .stNumberInput > div > div > input {
        border-radius: 10px;
        border: 2px solid #e0e0e0;
    }
    
    .stRadio > div {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #e9ecef;
    }
    
    /* Button styling */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        font-size: 1.1rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        width: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }
    
    /* Success message styling */
    .prediction-result {
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        font-size: 1.5rem;
        font-weight: 600;
        box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        margin: 2rem 0;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
    
    /* Info boxes */
    .info-box {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
    }
    
    /* Animation for cards */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animated-card {
        animation: fadeInUp 0.6s ease-out;
    }
</style>
""", unsafe_allow_html=True)

# Header moderne
st.markdown("""
<div class="header-container animated-card">
    <div class="header-title">üíé CLV Predictor</div>
    <div class="header-subtitle">Pr√©diction Intelligente de la Valeur Client Lifetime</div>
</div>
""", unsafe_allow_html=True)

# Charger le pipeline sauvegard√©
@st.cache_resource
def load_pipeline():
    with open("clv_model_pipeline.pkl", "rb") as f:
        return pickle.load(f)

try:
    pipeline = load_pipeline()
    st.sidebar.success("‚úÖ Mod√®le charg√© avec succ√®s")
except Exception as e:
    st.sidebar.error(f"‚ùå Erreur de chargement: {e}")
    st.stop()

# Sidebar avec informations
with st.sidebar:
    st.markdown("### üìä Informations")
    st.markdown("""
    <div class="info-box">
        <strong>üéØ Objectif</strong><br>
        Pr√©dire la valeur client lifetime (CLV) bas√©e sur les caract√©ristiques du client et son comportement d'achat.
    </div>
    """, unsafe_allow_html=True)
    

# Fonctions pour les choix de valeurs (√† adapter √† ton projet si n√©cessaire)
mois_options = list(range(1, 13))
type_abonnement_options = [ 'Essentiel','Essentiel Plus',
       'ESSENTIEL SOCIAL MEDIAS','Forfait Libert√© 3 H + 3 Go + 300 SMS', 'Forfait Libert√© 11 Go + 1 H',
              'Forfait Libert√© 11 H + 2 Go',
              'Forfait Libert√© 13 Go +  4 H',
       '  Forfait Libert√© 15 Go + 5 H',
       'Forfait Libert√© 20 Go + 1 H',
       'Forfait Libert√© 22 Go + 2 H',
       '   Forfait maitris√© 14 Go + 14 H',
       '   Forfait maitris√© 30 Go + 3 H', 'Forfait Maitris√© 45 Go + 5 H',
       '    Forfait maitris√© 30 Go + 12 H',
       '     Forfait Maitris√© 25 Go + 20 H',
       'Forfait maitris√© 22 H + 12 Go', 'Forfait maitris√© 30 Go + 30 H',
       '      Forfait Maitris√© 55 Go + 15 H',
       'Illimit√© mobile 259DH/mois',
       '       Illimit√© Mobile 439 DH/mois',
       '        Illimit√© Mobile 649 DH/mois']

typecarte_options = ["visa", "mastercard", "autre"]
pays_options = ['maroc', 'malte', 'france', "etats unis d'amerique", 'italie',
       'hongrie', 'inde', 'belgique', 'allemagne', 'bresil', 'oman',
       'algerie', 'tunisie', 'canada', 'vietnam', 'espagne', 'colombie',
       'autriche', 'norvege', 'portugal', 'royaume uni', 'irlande',
       'roumanie', 'hollande', 'finlande', 'suisse', 'republique tcheque',
       'republique slovaque', 'egypte', 'croatie', 'australie', 'pologne',
       'cameroun', 'suede', 'mexique', 'emirats arabes unis', 'anguilla',
       'jordanie', 'bosnie herzegovine', 'japon', 'gibraltar', 'russie',
       'namibie', 'slovenie', 'mauritanie', 'luxembourg', 'iran',
       'singapour', 'hong kong', 'angola', 'arabie saoudite', 'senegal',
       'montenegro', 'philippines', 'ile maurice', 'turquie', 'andorre',
       'antilles neerlandaises', 'chypre', 'koweit', 'chine',
       'coree du sud', 'madagascar', 'pakistan', 'bahrein', 'bulgarie',
       'danemark', 'lesotho', 'ukraine', "cote d'ivoire", 'grece',
       'lithuania', 'nouvelle caledonie', 'malaisie', 'syrie', 'gabon',
       'liban', 'uruguay', 'nouvelle zelande', 'chili', 'taiwan',
       'guernsey (uk)', 'nigeria', 'belarusse', 'armenie', 'jersey ( uk)',
       'costa rica', 'serbie', 'perou', 'estonie', 'lettonie',
       'virgin islands (usa)', 'gambie', 'iraq', 'cuba', 'georgie',
       'islande', 'afghanistan', 'soudan', 'iles comores', 'argentine',
       'ethiopie', 'mali', 'afrique du sud', 'acores', 'tchad',
       'palestine', 'benin', 'thailande', 'sri lanka', 'zimbabwe',
       'myanmar', 'bangladesh', 'indonesie', 'guatemala', 'burkina faso',
       'yemen', 'nicaragua', 'repulique dominicaine', 'guinee bissau',
       'saint lucia', 'djibouti']
recency_options = ["Recent","Moderate","Old", "Very Old"]

frequency_score_options = ["Single","Low", "Medium", "High"]

# Interface principale avec colonnes
col1, col2 = st.columns([2, 1])

with col1:
    # Formulaire de saisie moderne
    with st.form(key="clv_form"):
        st.markdown("### üë§ Profil Client")
        
        # Premi√®re ligne d'inputs
        col_left, col_right = st.columns(2)
        
        with col_left:
            mois_de_creation = st.selectbox(
                "üìÖ Mois de cr√©ation", 
                mois_options,
                help="Mois de cr√©ation du compte client"
            )
            type_abonnement = st.selectbox(
                "üì± Type d'abonnement", 
                type_abonnement_options,
                help="Type de forfait souscrit par le client"
            )
            pays = st.selectbox(
                "üåç Pays", 
                pays_options,
                help="Pays de r√©sidence du client"
            )
            avg_order_value = st.number_input(
                "üí∞ Montant d'abonnement mensuel (MAD)", 
                min_value=59, 
                value=59, 
                step=1,
                help="Montant mensuel de l'abonnement t√©l√©phonique"
            )
        
        with col_right:
            recency_category = st.selectbox(
                "‚è∞ R√©cence", 
                recency_options,
                help="Anciennet√© de la derni√®re interaction"
            )
            frequency_score = st.selectbox(
                "üîÑ Score de fr√©quence", 
                frequency_score_options,
                help="Fr√©quence d'achat du client"
            )
            age = st.selectbox(
                "üéÇ √Çge du client", 
                list(range(18, 80)),
                index=7,  # Default to 25 years old
                help="√Çge du client en ann√©es"
            )
            is_foreign = st.radio(
                "üåê Client √©tranger ?", 
                options=[("Non", 0), ("Oui", 1)], 
                horizontal=True,
                help="Le client r√©side-t-il √† l'√©tranger ?"
            )[1]
        
        # Bouton de pr√©diction
        st.markdown("<br>", unsafe_allow_html=True)
        submit = st.form_submit_button("üîÆ Pr√©dire la Valeur Client (CLV)")

with col2:
    # Panneau d'informations
    st.markdown("### üí° Guide d'utilisation")
    st.markdown("""
    <div class="metric-card animated-card">
        <h3>üéØ Optimisation CLV</h3>
        <ul>
            <li><strong>R√©cence:</strong> Plus r√©cent = meilleur CLV</li>
            <li><strong>Fr√©quence:</strong> Plus √©lev√©e = fid√©lit√© accrue</li>
            <li><strong>Abonnement:</strong> Revenus mensuels r√©currents</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    

# Transformation des entr√©es, frequency_score : "Single", "Low", "Medium", "High" -> 1, 2, 3,4
transformations = {
     "frequency_score": {"Single": 1, "Low": 2, "Medium": 3, "High": 4},
}

# Transformation des entr√©es
# Store original values for later display but use transformed values for prediction
original_freq_score = frequency_score

# Apply transformations while keeping originals for display
if frequency_score in transformations["frequency_score"]:
    freq_score_for_model = str(transformations["frequency_score"][frequency_score])
else:
    freq_score_for_model = str(frequency_score)

# Extract just the boolean value from is_foreign selection
is_foreign_value = is_foreign  # This should already be just the integer value

# Pr√©paration des donn√©es √† pr√©dire
if submit:
    with st.spinner('üîÑ Calcul de la pr√©diction en cours...'):
        # Display dictionary with original values
        display_dict = {
            "mois_de_creation": mois_de_creation,
            "type_d'abonnement": type_abonnement,
            "pays": pays,
            "recency_category": recency_category,
            "age": age,
            "frequency_score": original_freq_score,
            "avg_order_value": avg_order_value,
            "is_foreign": is_foreign_value,
        }
        
        # Prediction dictionary with transformed values
        input_dict = {
            "mois_de_creation": mois_de_creation,
            "type_d'abonnement": type_abonnement,
            "pays": pays,
            "recency_category": recency_category,
            "age": float(age),  # Ensure numeric
            "frequency_score": freq_score_for_model,
            "avg_order_value": float(avg_order_value),  # Ensure numeric
            "is_foreign": int(is_foreign_value),  # Ensure integer
        }
        
        input_df = pd.DataFrame([input_dict])
        
        try:
            predicted_clv = pipeline.predict(input_df)[0]
            
            # Affichage des r√©sultats avec style moderne
            st.markdown("---")
            
            # R√©sultat principal
            st.markdown(f"""
            <div class="prediction-result animated-card">
                <div style="font-size: 1.2rem; margin-bottom: 1rem;">üíé PR√âDICTION CLV</div>
                <div style="font-size: 3rem; font-weight: 800; margin-bottom: 0.5rem;">
                    {predicted_clv:,.0f} MAD
                </div>
                <div style="font-size: 1rem; opacity: 0.9;">
                    Valeur totale pr√©dite de l'abonn√© t√©l√©com
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Classification du client (ajust√©e pour les abonnements t√©l√©coms)
            if predicted_clv < 3000:
                category = "ü•â Abonn√© Standard"
                color = "#95a5a6"
                recommendation = "Proposer des offres d'upgrade et services additionnels"
            elif predicted_clv < 6000:
                category = "ü•à Abonn√© Fid√®le"
                color = "#3498db"
                recommendation = "Maintenir la satisfaction, proposer des services premium"
            elif predicted_clv < 10000:
                category = "ü•á Abonn√© Premium"
                color = "#e74c3c"
                recommendation = "Service client prioritaire, offres personnalis√©es"
            else:
                category = "üíé Abonn√© VIP"
                color = "#9b59b6"
                recommendation = "Gestionnaire d√©di√©, avantages exclusifs"
            
            # Affichage en colonnes pour les m√©triques
            col_met1, col_met2, col_met3 = st.columns(3)
            
            with col_met1:
                st.markdown(f"""
                <div class="metric-card animated-card">
                    <h3>üè∑Ô∏è Cat√©gorie Abonn√©</h3>
                    <div style="color: {color}; font-size: 1.5rem; font-weight: 600;">
                        {category}
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            with col_met2:
                # Pour les t√©l√©coms, calculer la dur√©e de vie estim√©e en mois
                duree_vie_mois = predicted_clv / avg_order_value
                st.markdown(f"""
                <div class="metric-card animated-card">
                    <h3>‚è±Ô∏è Dur√©e de Vie Estim√©e</h3>
                    <div class="metric-value">{duree_vie_mois:.1f} mois</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col_met3:
                # Revenus annuels estim√©s
                revenus_annuels = avg_order_value * 12
                st.markdown(f"""
                <div class="metric-card animated-card">
                    <h3>ÔøΩ Revenus Annuels</h3>
                    <div class="metric-value">{revenus_annuels:,.0f} MAD</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Recommandations
            st.markdown(f"""
            <div class="info-box animated-card">
                <strong>üí° Recommandation:</strong> {recommendation}
            </div>
            """, unsafe_allow_html=True)
            
            # Donn√©es d√©taill√©es dans un expander
            with st.expander("üìã D√©tails de la pr√©diction"):
                st.markdown("### Donn√©es utilis√©es pour la pr√©diction:")
                
                # Cr√©er un DataFrame plus lisible
                details_df = pd.DataFrame([
                    {"Param√®tre": "Mois de cr√©ation", "Valeur": f"{mois_de_creation}"},
                    {"Param√®tre": "Type d'abonnement", "Valeur": type_abonnement},
                    {"Param√®tre": "Pays", "Valeur": pays.title()},
                    {"Param√®tre": "R√©cence", "Valeur": recency_category},
                    {"Param√®tre": "√Çge", "Valeur": f"{age} ans"},
                    {"Param√®tre": "Score de fr√©quence", "Valeur": original_freq_score},
                    {"Param√®tre": "Abonnement mensuel", "Valeur": f"{avg_order_value} MAD/mois"},
                    {"Param√®tre": "Client √©tranger", "Valeur": "Oui" if is_foreign_value else "Non"},
                ])
                
                st.dataframe(details_df, use_container_width=True, hide_index=True)
                
                # Ajout d'informations sp√©cifiques aux t√©l√©coms
                st.markdown("### üìä Analyse T√©l√©com:")
                
                col_tel1, col_tel2 = st.columns(2)
                
                with col_tel1:
                    st.metric("üí∏ D√©pense Mensuelle", f"{avg_order_value} MAD")
                    st.metric("üî¢ Dur√©e Pr√©dite", f"{duree_vie_mois:.1f} mois")
                
                with col_tel2:
                    st.metric("üìà Total sur 24 mois", f"{avg_order_value * 24:,.0f} MAD")
                    churn_risk = "Faible" if duree_vie_mois > 18 else "Mod√©r√©" if duree_vie_mois > 12 else "√âlev√©"
                    st.metric("‚ö†Ô∏è Risque de Churn", churn_risk)
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la pr√©diction : {e}")
            with st.expander("üîç D√©tails de l'erreur"):
                st.exception(e)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #7f8c8d; padding: 2rem;">
    <p>D√©velopp√© avec ‚ù§Ô∏è pour l'optimisation de la valeur des abonn√©s t√©l√©coms</p>
    <p style="font-size: 0.9rem;">¬© 2025 - Syst√®me de Pr√©diction CLV T√©l√©com</p>
</div>
""", unsafe_allow_html=True)
